---
import "@styles/global.css";
import ThemeToggle from "./ThemeToggle.astro";

const currentPath = Astro.url.pathname;
---

<!-- dark:bg-[#110819] -->
<header
  id="mainHeader"
  class="z-100 transition-all duration-300 fixed top-0 flex items-center bg-white/90 dark:bg-[#1d1427] backdrop-blur-xs shadow-xl md:max-w-4xl w-full md:max-h-[60px] rounded-b-xs"
>
  <nav
    class="flex px-5 items-center justify-between text-xs md:text-[1rem] font-semibold w-full"
  >
    <a href="/"
      ><img
        id="headerLogo"
        src="/favicon.svg"
        alt="Logo"
        class="h-8 md:h-10 w-auto transform transition-transform duration-200 hover:scale-105 will-change-transform"
      /></a
    >
    <div class="flex items-center justify-center text-center gap-1 md:gap-0">
      <a
        href="/galeria"
        class="relative inline-block py-5 min-w-16 md:min-w-[100px] transition-colors duration-300 hover:text-[#f1c40f] link-gradient-underline"
        >Galería</a
      >
      <a
        href={`${currentPath === "/" ? "#about" : "/#about"}`}
        class="relative inline-block py-5 min-w-16 md:min-w-[100px] transition-colors duration-300 hover:text-[#f1c40f] link-gradient-underline"
      >
        Sobre mí
      </a>
      <a
        href=""
        class="relative inline-block py-5 min-w-16 md:min-w-[100px] transition-colors duration-300 hover:text-[#f1c40f] link-gradient-underline"
        >Contacto</a
      >
    </div>
    <ThemeToggle />
  </nav>
</header>

<script>
  const header = document.getElementById("mainHeader");
  const headerLogo = document.getElementById("headerLogo") as HTMLImageElement;
  let lastScroll = 0;
  let ticking = false;

  // Función para actualizar el logo según el tema
  function updateHeaderLogo() {
    if (headerLogo) {
      const isDark = document.documentElement.classList.contains("dark");

      if (isDark) {
        headerLogo.src = "/favicon-dark.svg";
      } else {
        headerLogo.src = "/favicon.svg";
      }
    }
  }

  // Observar cambios en la clase dark del elemento html
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === "attributes" &&
        mutation.attributeName === "class"
      ) {
        updateHeaderLogo();
      }
    });
  });

  // Iniciar la observación
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });

  // Verificar estado inicial
  updateHeaderLogo();

  // Script original del header scroll
  window.addEventListener("scroll", () => {
    const currentScroll = window.scrollY;

    if (!ticking) {
      window.requestAnimationFrame(() => {
        if (header) {
          if (currentScroll > 50) {
            header.classList.add("shrink");
          } else {
            header.classList.remove("shrink");
          }

          if (currentScroll > lastScroll && currentScroll > 100) {
            header.classList.add("hide");
          } else {
            header.classList.remove("hide");
          }
        }

        lastScroll = currentScroll;
        ticking = false;
      });

      ticking = true;
    }
  });
</script>
